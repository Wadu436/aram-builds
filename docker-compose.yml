# Use postgres/example user/password credentials
version: '3.9'

services:
  db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: builds
    volumes:
      - db-data:/var/lib/postgresql/data

  backend:
    image: aram-builds-backend
    build: ./backend
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DATABASE: builds
      POSTGRES_ADDRESS: db:5432
      BIND_ADDRESS: :80
    depends_on:
      - db
    networks:
      - default
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.builds_backend.rule=Host(`aram.namr1.nl`) && PathPrefix(`/api/`)"
      - "traefik.http.routers.builds_backend.entrypoints=websecure"
      - "traefik.http.services.builds_backend.loadbalancer.server.port=80"
      - "traefik.http.routers.builds_backend.tls=true"
      - "traefik.http.routers.builds_backend.tls.certresolver=letsencrypt"
      - "traefik.docker.network=traefik_proxy"

  frontend:
    image: aram-builds-frontend
    build: ./frontend
    depends_on:
      - backend
    networks:
      - default
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.builds_frontend.rule=Host(`aram.namr1.nl`) && PathPrefix(`/`)"
      - "traefik.http.routers.builds_frontend.entrypoints=websecure"
      - "traefik.http.services.builds_frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.builds_frontend.tls=true"
      - "traefik.http.routers.builds_frontend.tls.certresolver=letsencrypt"
      - "traefik.docker.network=traefik_proxy"

volumes:
  db-data:


networks:
  traefik_proxy:
    name: traefik_proxy
    external: true
